const express = require('express');
const cors = require('cors');
const app = express();
const port = 3005;

app.use(cors());

const food = ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà','üçí', 'üçë',
'üçç', 'ü••', 'ü•ù', 'üçÖ', 'ü•ë', 'üçÜ', 'üå∂', 'ü•í', 'ü•¶', 'üåΩ', 'ü•ï', 'ü•ó', 'ü•î', 'üç†',
'ü•ú', 'üçØ', 'üçû', 'ü•ê', 'ü•ñ', 'ü•®', 'ü•û', 'üßÄ', 'üçó', 'üçñ', 'ü•©', 'üç§', 'ü•ö', 'üç≥',
'ü•ì', 'üçî', 'üçü', 'üå≠', 'üçï', 'üçù', 'ü•™', 'ü•ô', 'üåÆ', 'üåØ', 'üçú', 'ü•ò', 'üç≤', 'ü•´',
'üç•', 'üç£', 'üç±', 'üçõ', 'üçô', 'üçö', 'üçò', 'ü•ü', 'üç¢', 'üç°', 'üçß', 'üç®', 'üç¶', 'üç∞',
'üéÇ', 'ü•ß', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'ü•†', '‚òï', 'üçµ', 'ü•£', 'üçº',
'ü•§', 'ü•õ', 'üç∫', 'üçª', 'üç∑', 'ü•Ç', 'ü•É', 'üç∏', 'üçπ', 'üçæ', 'üç∂', 'ü•Ñ', 'üç¥', 'üçΩ', 
'ü•¢', 'ü•°',];

const animals = ['üê∂','üê±','üê≠','üêπ','üê∞','üêª','üêº','üê®','üêØ','ü¶Å','üêÆ','üê∑','üêΩ','üê∏',
'üêµ','üôà','üôâ','üôä','üêí','ü¶ç','üêî','üêß','üê¶','üê§','üê£','üê•','üê∫','ü¶ä','üêó','üê¥','ü¶ì',
'ü¶í','ü¶å','ü¶Ñ','üêù','üêõ','ü¶ã','üêå','üêû','üêú','ü¶ó','üï∑','üï∏','ü¶Ç','üê¢','üêç','ü¶é','ü¶Ä',
'ü¶ë','üêô','ü¶ê','üê†','üêü','üê°','üê¨','ü¶à','üê≥','üêã','üêä','üêÜ','üêÖ','üêÉ','üêÇ','üêÑ','üê™',
'üê´','üêò','ü¶è','üêê','üêè','üêë','üêé','üêñ','ü¶á','üêì','ü¶É','üïä','ü¶Ö','ü¶Ü','ü¶â','üêï','üê©',
'üêà','üêá','üêÄ','üêÅ','üêø','ü¶î','üêæ','üêâ','üê≤','ü¶ï','ü¶ñ'];

const activities = ['‚öΩ','üèÄ','üèà','‚öæ','üéæ','üèê','üèâ','üé±','üèì','üè∏','ü•Ö','üèí','üèë',
'üèè','ü•å','‚õ≥','üèπ','üé£','ü•ä','ü•ã','‚õ∏','üéø','üõ∑','‚õ∑','üèÇ','üèãÔ∏è‚Äç‚ôÄÔ∏è','üèãÔ∏è‚Äç‚ôÇÔ∏è','ü§∫','ü§º‚Äç‚ôÄÔ∏è','ü§º‚Äç‚ôÇÔ∏è',
'ü§∏‚Äç‚ôÄÔ∏è','ü§∏‚Äç‚ôÇÔ∏è','‚õπÔ∏è‚Äç‚ôÄÔ∏è','‚õπÔ∏è‚Äç‚ôÇÔ∏è','ü§æ‚Äç‚ôÄÔ∏è','ü§æ‚Äç‚ôÇÔ∏è','üßó‚Äç‚ôÄÔ∏è','üßó‚Äç‚ôÇÔ∏è','üèåÔ∏è‚Äç‚ôÄÔ∏è','üèåÔ∏è‚Äç‚ôÇÔ∏è','üßò‚Äç‚ôÄÔ∏è','üßò‚Äç‚ôÇÔ∏è','üßñ‚Äç‚ôÄÔ∏è','üßñ‚Äç‚ôÇÔ∏è','üèÑ‚Äç‚ôÄÔ∏è','üèÑ‚Äç‚ôÇÔ∏è','üèä‚Äç‚ôÄÔ∏è',
'üèä‚Äç‚ôÇÔ∏è','ü§Ω‚Äç‚ôÄÔ∏è','ü§Ω‚Äç‚ôÇÔ∏è','üö£‚Äç‚ôÄÔ∏è','üö£‚Äç‚ôÇÔ∏è','üèá','üö¥‚Äç‚ôÄÔ∏è','üö¥‚Äç‚ôÇÔ∏è','üöµ‚Äç‚ôÄÔ∏è','üöµ‚Äç‚ôÇÔ∏è','üéΩ','üéñ','üèÖ','ü•á','ü•à','ü•â','üèÜ',
'üèµ','üéó','üé´','üéü','üé™','ü§π‚Äç‚ôÄÔ∏è','ü§π‚Äç‚ôÇÔ∏è','üé≠','üé®','üé¨','üé§','üéß','üéº','üéπ','ü•Å','üé∑','üé∫',
'üé∏','üéª','üé≤','üéØ','üé≥','üéÆ','üëæ','üé∞'];

app.get('/cards/:difficulty/:theme', (request, response) => {

        var data={cards:[]};
        
        if(request.params !== null){
            if(request.params.difficulty !== null && request.params.theme !== null){
                const difficulty=request.params.difficulty;
                const theme=request.params.theme;
                var cards = getCards(difficulty,theme);
                var card1=[...cards];
                var card2=[...cards];
                cards.forEach(card =>{
                    data.cards.push(card);
                });

                cards.forEach(card =>{
                    data.cards.push(card);
                });

                shuffleArray(data.cards);
        }
            
    }
    response.send(JSON.stringify(data));
});



app.get('/scores', (request, response) => {
    console.log(request); // L√≠nea repetida
    console.log(request); // L√≠nea repetida
    response.send('Lista de scores');
});

app.listen(port, () => {
    console.log(`La aplicaci√≥n de ejemplo est√° escuchando en el puerto ${port}`);
});


function randomInteger(min, max){
    return Math.floor(Math.random() * (max - min + 1))+min;
}
function getIconIndex(iconIndex, iconList){

        let newIconIndex = randomInteger(0,(iconList.length-1));

        if(iconIndex===newIconIndex){
        return getIconIndex(iconIndex,iconList);
        
    }
    return newIconIndex;
}

function getCards(difficulty,theme){
    var cards = [];
    var iconList = null;
    switch (theme) {
        case 'food':
            iconList=food;
            break;
            case 'animals':
            iconList=animals;
            break;
            case 'activities':
            iconList=activities;
            break;
    
        default:
            iconList=food;
            break;
    }

    for (let i = 0; i < difficulty; i++) {
        var iconIndex=getIconIndex(-1, iconList);
        var card ={
            "isDiscovered": false,
            "icon": iconList[iconIndex],
            "id": iconIndex
        }
        cards.push(card);
    }
    return cards;
};

function shuffleArray(array){
    for(let i = array.length -1; i > 0; i--) {
        const j = Math.floor(Math.random()*(i+1));
        [array[i],array[j]]=[array[j],array[i]];
    }
}


